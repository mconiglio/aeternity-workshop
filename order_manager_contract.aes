contract Identity =
  record item = {
    code: string,
    name: string,
    price: int,
    quantity: int }

  record order = {
    items: list(item),
    totalQuantity: int,
    totalPrice: int }

  record state = {
    orders: map(address, order) }

  entrypoint init() : state = {
    orders = {} }

  stateful entrypoint new_order() =
    put(state{ orders[Call.caller] = { items = [], totalQuantity = 0, totalPrice = 0 } })

  stateful entrypoint add_item(code : string, name : string, price : int, quantity : int) =
    let new_order = {
      items = { code = code, name = name, price = price, quantity = quantity } :: state.orders[Call.caller].items,
      totalQuantity = state.orders[Call.caller].totalQuantity + quantity,
      totalPrice = state.orders[Call.caller].totalPrice + price * quantity }
    put(state{ orders[Call.caller] = new_order })

  entrypoint get_total_price() : string =
    Int.to_str(state.orders[Call.caller].totalPrice)
